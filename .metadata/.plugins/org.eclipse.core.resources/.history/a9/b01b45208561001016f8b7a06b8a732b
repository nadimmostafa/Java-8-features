package org.nadim.collectionstream;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class MyStreamFlatMap {

	public static void main(String[] args) {
		List<String> l1 = new ArrayList<>();
		l1.add("Nadim");
		l1.add("Asif");
		l1.add("Shuvo");
		
		List<String> l2 = new ArrayList<>();
		l2.add("Java");
		l2.add("Python");
		l2.add("Javascript");
		
		List<List<String>> l3 = new ArrayList<>();
		l3.add(l1);
		l3.add(l2);
		
		// normal way to print
		for(int i=0;i<l3.size();i++) {
			for(int j=0;j<l3.get(i).size();j++) {
				//System.out.println("Elements: "+l3.get(i).get(j));
			}
			
		}
		
		//or
		for(List<String> l4:l3) {
			for(String s:l4) {
				//System.out.println(s);
			}
		}
		
		
		//or
		for(int i=0;i<l3.size();i++) {
			List<String> l4 = l3.get(i);
			for(int j=0;j<l4.size();j++) {
				//System.out.println("Elements: "+l3.get(i).get(j));
			}
			
		}
		
		// using Java 1.8
		//l3.forEach(l4-> l4.forEach(System.out::println));
		
		//List of List elements store into a list using java 1.8
		List<String> l5 = l3.stream().flatMap(l4->l4.stream()).collect(Collectors.toList());
		System.out.println(l5);
		
		
		//Debugging using Peek() method
		List<String> l6 = l3.stream()
				.peek(p->System.out.println("Before Processing: "+p))
				.flatMap(l4->l4.stream().peek(p2->System.out.println("After Proccessing "+p2))).collect(Collectors.toList());
		System.out.println(l6);
		
		
		
	}

}
